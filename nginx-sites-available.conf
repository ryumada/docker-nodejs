# /etc/nginx/sites-available/enter_your_domain.conf (or similar)

server {
    listen 80; # Listen on HTTP port
    listen [::]:80; # Listen on IPv6 HTTP port
    server_name enter_your_domain.com enter_your_domain.com; # Replace with your actual domain or server IP

    # Redirect all HTTP traffic to HTTPS (Recommended and efficient)
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2; # Listen on HTTPS port, enable SSL and HTTP/2
    listen [::]:443 ssl http2; # Listen on IPv6 HTTPS port
    server_name enter_your_domain.com enter_your_domain.com; # Replace with your actual domain

    ssl_certificate /etc/letsencrypt/live/enter_your_domain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/enter_your_domain.com/privkey.pem;

    # Recommended SSL settings for security
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_protocols TLSv1.2 TLSv1.3; # Only allow strong TLS protocols
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;

    # Proxy requests to your Next.js application running in Docker
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 900s;
    }

    # Error pages (optional)
    # error_page 500 502 503 504 /50x.html;
    # location = /50x.html {
    #     root html;
    # }

    # Basic logging specific to this server block (optional, can use http-level access_log)
    access_log  /var/log/nginx/enter_your_domain.access.log;
    error_log   /var/log/nginx/enter_your_domain.error.log warn;
}